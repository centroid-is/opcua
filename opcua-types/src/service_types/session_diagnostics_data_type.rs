// This file was autogenerated from schemas/1.0.4/Opc.Ua.Types.bsd by opcua-codegen
//
// DO NOT EDIT THIS FILE

// OPCUA for Rust
// SPDX-License-Identifier: MPL-2.0
// Copyright (C) 2017-2024 Adam Lock, Einar Omang
#[allow(unused)]
mod opcua { pub use crate as types; }
#[derive(Debug, Clone, PartialEq)]
#[cfg_attr(
    feature = "json",
    derive(opcua::types::JsonEncodable, opcua::types::JsonDecodable)
)]
#[cfg_attr(feature = "xml", derive(opcua::types::FromXml))]
#[derive(Default)]
pub struct SessionDiagnosticsDataType {
    pub session_id: opcua::types::node_id::NodeId,
    pub session_name: opcua::types::string::UAString,
    pub client_description: super::application_description::ApplicationDescription,
    pub server_uri: opcua::types::string::UAString,
    pub endpoint_url: opcua::types::string::UAString,
    pub locale_ids: Option<Vec<opcua::types::string::UAString>>,
    pub actual_session_timeout: f64,
    pub max_response_message_size: u32,
    pub client_connection_time: opcua::types::date_time::DateTime,
    pub client_last_contact_time: opcua::types::date_time::DateTime,
    pub current_subscriptions_count: u32,
    pub current_monitored_items_count: u32,
    pub current_publish_requests_in_queue: u32,
    pub total_request_count: super::service_counter_data_type::ServiceCounterDataType,
    pub unauthorized_request_count: u32,
    pub read_count: super::service_counter_data_type::ServiceCounterDataType,
    pub history_read_count: super::service_counter_data_type::ServiceCounterDataType,
    pub write_count: super::service_counter_data_type::ServiceCounterDataType,
    pub history_update_count: super::service_counter_data_type::ServiceCounterDataType,
    pub call_count: super::service_counter_data_type::ServiceCounterDataType,
    pub create_monitored_items_count: super::service_counter_data_type::ServiceCounterDataType,
    pub modify_monitored_items_count: super::service_counter_data_type::ServiceCounterDataType,
    pub set_monitoring_mode_count: super::service_counter_data_type::ServiceCounterDataType,
    pub set_triggering_count: super::service_counter_data_type::ServiceCounterDataType,
    pub delete_monitored_items_count: super::service_counter_data_type::ServiceCounterDataType,
    pub create_subscription_count: super::service_counter_data_type::ServiceCounterDataType,
    pub modify_subscription_count: super::service_counter_data_type::ServiceCounterDataType,
    pub set_publishing_mode_count: super::service_counter_data_type::ServiceCounterDataType,
    pub publish_count: super::service_counter_data_type::ServiceCounterDataType,
    pub republish_count: super::service_counter_data_type::ServiceCounterDataType,
    pub transfer_subscriptions_count: super::service_counter_data_type::ServiceCounterDataType,
    pub delete_subscriptions_count: super::service_counter_data_type::ServiceCounterDataType,
    pub add_nodes_count: super::service_counter_data_type::ServiceCounterDataType,
    pub add_references_count: super::service_counter_data_type::ServiceCounterDataType,
    pub delete_nodes_count: super::service_counter_data_type::ServiceCounterDataType,
    pub delete_references_count: super::service_counter_data_type::ServiceCounterDataType,
    pub browse_count: super::service_counter_data_type::ServiceCounterDataType,
    pub browse_next_count: super::service_counter_data_type::ServiceCounterDataType,
    pub translate_browse_paths_to_node_ids_count: super::service_counter_data_type::ServiceCounterDataType,
    pub query_first_count: super::service_counter_data_type::ServiceCounterDataType,
    pub query_next_count: super::service_counter_data_type::ServiceCounterDataType,
    pub register_nodes_count: super::service_counter_data_type::ServiceCounterDataType,
    pub unregister_nodes_count: super::service_counter_data_type::ServiceCounterDataType,
}
impl opcua::types::MessageInfo for SessionDiagnosticsDataType {
    fn type_id(&self) -> opcua::types::ObjectId {
        opcua::types::ObjectId::SessionDiagnosticsDataType_Encoding_DefaultBinary
    }
    fn json_type_id(&self) -> opcua::types::ObjectId {
        opcua::types::ObjectId::SessionDiagnosticsDataType_Encoding_DefaultJson
    }
    fn xml_type_id(&self) -> opcua::types::ObjectId {
        opcua::types::ObjectId::SessionDiagnosticsDataType_Encoding_DefaultXml
    }
}
impl opcua::types::BinaryEncodable for SessionDiagnosticsDataType {
    #[allow(unused_variables)]
    fn byte_len(&self, ctx: &opcua::types::Context<'_>) -> usize {
        let mut size = 0usize;
        size += self.session_id.byte_len(ctx);
        size += self.session_name.byte_len(ctx);
        size += self.client_description.byte_len(ctx);
        size += self.server_uri.byte_len(ctx);
        size += self.endpoint_url.byte_len(ctx);
        size += self.locale_ids.byte_len(ctx);
        size += self.actual_session_timeout.byte_len(ctx);
        size += self.max_response_message_size.byte_len(ctx);
        size += self.client_connection_time.byte_len(ctx);
        size += self.client_last_contact_time.byte_len(ctx);
        size += self.current_subscriptions_count.byte_len(ctx);
        size += self.current_monitored_items_count.byte_len(ctx);
        size += self.current_publish_requests_in_queue.byte_len(ctx);
        size += self.total_request_count.byte_len(ctx);
        size += self.unauthorized_request_count.byte_len(ctx);
        size += self.read_count.byte_len(ctx);
        size += self.history_read_count.byte_len(ctx);
        size += self.write_count.byte_len(ctx);
        size += self.history_update_count.byte_len(ctx);
        size += self.call_count.byte_len(ctx);
        size += self.create_monitored_items_count.byte_len(ctx);
        size += self.modify_monitored_items_count.byte_len(ctx);
        size += self.set_monitoring_mode_count.byte_len(ctx);
        size += self.set_triggering_count.byte_len(ctx);
        size += self.delete_monitored_items_count.byte_len(ctx);
        size += self.create_subscription_count.byte_len(ctx);
        size += self.modify_subscription_count.byte_len(ctx);
        size += self.set_publishing_mode_count.byte_len(ctx);
        size += self.publish_count.byte_len(ctx);
        size += self.republish_count.byte_len(ctx);
        size += self.transfer_subscriptions_count.byte_len(ctx);
        size += self.delete_subscriptions_count.byte_len(ctx);
        size += self.add_nodes_count.byte_len(ctx);
        size += self.add_references_count.byte_len(ctx);
        size += self.delete_nodes_count.byte_len(ctx);
        size += self.delete_references_count.byte_len(ctx);
        size += self.browse_count.byte_len(ctx);
        size += self.browse_next_count.byte_len(ctx);
        size += self.translate_browse_paths_to_node_ids_count.byte_len(ctx);
        size += self.query_first_count.byte_len(ctx);
        size += self.query_next_count.byte_len(ctx);
        size += self.register_nodes_count.byte_len(ctx);
        size += self.unregister_nodes_count.byte_len(ctx);
        size
    }
    #[allow(unused_variables)]
    fn encode<S: std::io::Write + ?Sized>(
        &self,
        stream: &mut S,
        ctx: &opcua::types::Context<'_>,
    ) -> opcua::types::EncodingResult<usize> {
        let mut size = 0usize;
        size += self.session_id.encode(stream, ctx)?;
        size += self.session_name.encode(stream, ctx)?;
        size += self.client_description.encode(stream, ctx)?;
        size += self.server_uri.encode(stream, ctx)?;
        size += self.endpoint_url.encode(stream, ctx)?;
        size += self.locale_ids.encode(stream, ctx)?;
        size += self.actual_session_timeout.encode(stream, ctx)?;
        size += self.max_response_message_size.encode(stream, ctx)?;
        size += self.client_connection_time.encode(stream, ctx)?;
        size += self.client_last_contact_time.encode(stream, ctx)?;
        size += self.current_subscriptions_count.encode(stream, ctx)?;
        size += self.current_monitored_items_count.encode(stream, ctx)?;
        size += self.current_publish_requests_in_queue.encode(stream, ctx)?;
        size += self.total_request_count.encode(stream, ctx)?;
        size += self.unauthorized_request_count.encode(stream, ctx)?;
        size += self.read_count.encode(stream, ctx)?;
        size += self.history_read_count.encode(stream, ctx)?;
        size += self.write_count.encode(stream, ctx)?;
        size += self.history_update_count.encode(stream, ctx)?;
        size += self.call_count.encode(stream, ctx)?;
        size += self.create_monitored_items_count.encode(stream, ctx)?;
        size += self.modify_monitored_items_count.encode(stream, ctx)?;
        size += self.set_monitoring_mode_count.encode(stream, ctx)?;
        size += self.set_triggering_count.encode(stream, ctx)?;
        size += self.delete_monitored_items_count.encode(stream, ctx)?;
        size += self.create_subscription_count.encode(stream, ctx)?;
        size += self.modify_subscription_count.encode(stream, ctx)?;
        size += self.set_publishing_mode_count.encode(stream, ctx)?;
        size += self.publish_count.encode(stream, ctx)?;
        size += self.republish_count.encode(stream, ctx)?;
        size += self.transfer_subscriptions_count.encode(stream, ctx)?;
        size += self.delete_subscriptions_count.encode(stream, ctx)?;
        size += self.add_nodes_count.encode(stream, ctx)?;
        size += self.add_references_count.encode(stream, ctx)?;
        size += self.delete_nodes_count.encode(stream, ctx)?;
        size += self.delete_references_count.encode(stream, ctx)?;
        size += self.browse_count.encode(stream, ctx)?;
        size += self.browse_next_count.encode(stream, ctx)?;
        size += self.translate_browse_paths_to_node_ids_count.encode(stream, ctx)?;
        size += self.query_first_count.encode(stream, ctx)?;
        size += self.query_next_count.encode(stream, ctx)?;
        size += self.register_nodes_count.encode(stream, ctx)?;
        size += self.unregister_nodes_count.encode(stream, ctx)?;
        Ok(size)
    }
}
impl opcua::types::BinaryDecodable for SessionDiagnosticsDataType {
    #[allow(unused_variables)]
    fn decode<S: std::io::Read + ?Sized>(
        stream: &mut S,
        ctx: &opcua::types::Context<'_>,
    ) -> opcua::types::EncodingResult<Self> {
        Ok(Self {
            session_id: opcua::types::BinaryDecodable::decode(stream, ctx)?,
            session_name: opcua::types::BinaryDecodable::decode(stream, ctx)?,
            client_description: opcua::types::BinaryDecodable::decode(stream, ctx)?,
            server_uri: opcua::types::BinaryDecodable::decode(stream, ctx)?,
            endpoint_url: opcua::types::BinaryDecodable::decode(stream, ctx)?,
            locale_ids: opcua::types::BinaryDecodable::decode(stream, ctx)?,
            actual_session_timeout: opcua::types::BinaryDecodable::decode(stream, ctx)?,
            max_response_message_size: opcua::types::BinaryDecodable::decode(
                stream,
                ctx,
            )?,
            client_connection_time: opcua::types::BinaryDecodable::decode(stream, ctx)?,
            client_last_contact_time: opcua::types::BinaryDecodable::decode(
                stream,
                ctx,
            )?,
            current_subscriptions_count: opcua::types::BinaryDecodable::decode(
                stream,
                ctx,
            )?,
            current_monitored_items_count: opcua::types::BinaryDecodable::decode(
                stream,
                ctx,
            )?,
            current_publish_requests_in_queue: opcua::types::BinaryDecodable::decode(
                stream,
                ctx,
            )?,
            total_request_count: opcua::types::BinaryDecodable::decode(stream, ctx)?,
            unauthorized_request_count: opcua::types::BinaryDecodable::decode(
                stream,
                ctx,
            )?,
            read_count: opcua::types::BinaryDecodable::decode(stream, ctx)?,
            history_read_count: opcua::types::BinaryDecodable::decode(stream, ctx)?,
            write_count: opcua::types::BinaryDecodable::decode(stream, ctx)?,
            history_update_count: opcua::types::BinaryDecodable::decode(stream, ctx)?,
            call_count: opcua::types::BinaryDecodable::decode(stream, ctx)?,
            create_monitored_items_count: opcua::types::BinaryDecodable::decode(
                stream,
                ctx,
            )?,
            modify_monitored_items_count: opcua::types::BinaryDecodable::decode(
                stream,
                ctx,
            )?,
            set_monitoring_mode_count: opcua::types::BinaryDecodable::decode(
                stream,
                ctx,
            )?,
            set_triggering_count: opcua::types::BinaryDecodable::decode(stream, ctx)?,
            delete_monitored_items_count: opcua::types::BinaryDecodable::decode(
                stream,
                ctx,
            )?,
            create_subscription_count: opcua::types::BinaryDecodable::decode(
                stream,
                ctx,
            )?,
            modify_subscription_count: opcua::types::BinaryDecodable::decode(
                stream,
                ctx,
            )?,
            set_publishing_mode_count: opcua::types::BinaryDecodable::decode(
                stream,
                ctx,
            )?,
            publish_count: opcua::types::BinaryDecodable::decode(stream, ctx)?,
            republish_count: opcua::types::BinaryDecodable::decode(stream, ctx)?,
            transfer_subscriptions_count: opcua::types::BinaryDecodable::decode(
                stream,
                ctx,
            )?,
            delete_subscriptions_count: opcua::types::BinaryDecodable::decode(
                stream,
                ctx,
            )?,
            add_nodes_count: opcua::types::BinaryDecodable::decode(stream, ctx)?,
            add_references_count: opcua::types::BinaryDecodable::decode(stream, ctx)?,
            delete_nodes_count: opcua::types::BinaryDecodable::decode(stream, ctx)?,
            delete_references_count: opcua::types::BinaryDecodable::decode(stream, ctx)?,
            browse_count: opcua::types::BinaryDecodable::decode(stream, ctx)?,
            browse_next_count: opcua::types::BinaryDecodable::decode(stream, ctx)?,
            translate_browse_paths_to_node_ids_count: opcua::types::BinaryDecodable::decode(
                stream,
                ctx,
            )?,
            query_first_count: opcua::types::BinaryDecodable::decode(stream, ctx)?,
            query_next_count: opcua::types::BinaryDecodable::decode(stream, ctx)?,
            register_nodes_count: opcua::types::BinaryDecodable::decode(stream, ctx)?,
            unregister_nodes_count: opcua::types::BinaryDecodable::decode(stream, ctx)?,
        })
    }
}
