// This file was autogenerated from schemas/1.0.4/Opc.Ua.Types.bsd by opcua-codegen
//
// DO NOT EDIT THIS FILE

// OPCUA for Rust
// SPDX-License-Identifier: MPL-2.0
// Copyright (C) 2017-2024 Adam Lock, Einar Omang
#[allow(unused)]
mod opcua { pub use crate as types; }
#[derive(Debug, Clone, PartialEq)]
#[cfg_attr(
    feature = "json",
    derive(opcua::types::JsonEncodable, opcua::types::JsonDecodable)
)]
#[cfg_attr(feature = "xml", derive(opcua::types::FromXml))]
#[derive(Default)]
pub struct UserTokenPolicy {
    pub policy_id: opcua::types::string::UAString,
    pub token_type: super::enums::UserTokenType,
    pub issued_token_type: opcua::types::string::UAString,
    pub issuer_endpoint_url: opcua::types::string::UAString,
    pub security_policy_uri: opcua::types::string::UAString,
}
impl opcua::types::MessageInfo for UserTokenPolicy {
    fn type_id(&self) -> opcua::types::ObjectId {
        opcua::types::ObjectId::UserTokenPolicy_Encoding_DefaultBinary
    }
    fn json_type_id(&self) -> opcua::types::ObjectId {
        opcua::types::ObjectId::UserTokenPolicy_Encoding_DefaultJson
    }
    fn xml_type_id(&self) -> opcua::types::ObjectId {
        opcua::types::ObjectId::UserTokenPolicy_Encoding_DefaultXml
    }
}
impl opcua::types::BinaryEncodable for UserTokenPolicy {
    #[allow(unused_variables)]
    fn byte_len(&self, ctx: &opcua::types::Context<'_>) -> usize {
        let mut size = 0usize;
        size += self.policy_id.byte_len(ctx);
        size += self.token_type.byte_len(ctx);
        size += self.issued_token_type.byte_len(ctx);
        size += self.issuer_endpoint_url.byte_len(ctx);
        size += self.security_policy_uri.byte_len(ctx);
        size
    }
    #[allow(unused_variables)]
    fn encode<S: std::io::Write + ?Sized>(
        &self,
        stream: &mut S,
        ctx: &opcua::types::Context<'_>,
    ) -> opcua::types::EncodingResult<usize> {
        let mut size = 0usize;
        size += self.policy_id.encode(stream, ctx)?;
        size += self.token_type.encode(stream, ctx)?;
        size += self.issued_token_type.encode(stream, ctx)?;
        size += self.issuer_endpoint_url.encode(stream, ctx)?;
        size += self.security_policy_uri.encode(stream, ctx)?;
        Ok(size)
    }
}
impl opcua::types::BinaryDecodable for UserTokenPolicy {
    #[allow(unused_variables)]
    fn decode<S: std::io::Read + ?Sized>(
        stream: &mut S,
        ctx: &opcua::types::Context<'_>,
    ) -> opcua::types::EncodingResult<Self> {
        Ok(Self {
            policy_id: opcua::types::BinaryDecodable::decode(stream, ctx)?,
            token_type: opcua::types::BinaryDecodable::decode(stream, ctx)?,
            issued_token_type: opcua::types::BinaryDecodable::decode(stream, ctx)?,
            issuer_endpoint_url: opcua::types::BinaryDecodable::decode(stream, ctx)?,
            security_policy_uri: opcua::types::BinaryDecodable::decode(stream, ctx)?,
        })
    }
}
