// This file was autogenerated from schemas/1.0.4/Opc.Ua.Types.bsd by opcua-codegen
//
// DO NOT EDIT THIS FILE

// OPCUA for Rust
// SPDX-License-Identifier: MPL-2.0
// Copyright (C) 2017-2024 Adam Lock, Einar Omang
#[allow(unused)]
mod opcua {
    pub use crate as types;
}
#[derive(Debug, Clone, PartialEq)]
#[cfg_attr(
    feature = "json",
    derive(opcua::types::JsonEncodable, opcua::types::JsonDecodable)
)]
#[cfg_attr(feature = "xml", derive(opcua::types::FromXml))]
#[derive(Default)]
pub struct ReferenceDescription {
    pub reference_type_id: opcua::types::node_id::NodeId,
    pub is_forward: bool,
    pub node_id: opcua::types::expanded_node_id::ExpandedNodeId,
    pub browse_name: opcua::types::qualified_name::QualifiedName,
    pub display_name: opcua::types::localized_text::LocalizedText,
    pub node_class: super::enums::NodeClass,
    pub type_definition: opcua::types::expanded_node_id::ExpandedNodeId,
}
impl opcua::types::MessageInfo for ReferenceDescription {
    fn type_id(&self) -> opcua::types::ObjectId {
        opcua::types::ObjectId::ReferenceDescription_Encoding_DefaultBinary
    }
    fn json_type_id(&self) -> opcua::types::ObjectId {
        opcua::types::ObjectId::ReferenceDescription_Encoding_DefaultJson
    }
    fn xml_type_id(&self) -> opcua::types::ObjectId {
        opcua::types::ObjectId::ReferenceDescription_Encoding_DefaultXml
    }
}
impl opcua::types::BinaryEncodable for ReferenceDescription {
    #[allow(unused_variables)]
    fn byte_len(&self, ctx: &opcua::types::Context<'_>) -> usize {
        let mut size = 0usize;
        size += self.reference_type_id.byte_len(ctx);
        size += self.is_forward.byte_len(ctx);
        size += self.node_id.byte_len(ctx);
        size += self.browse_name.byte_len(ctx);
        size += self.display_name.byte_len(ctx);
        size += self.node_class.byte_len(ctx);
        size += self.type_definition.byte_len(ctx);
        size
    }
    #[allow(unused_variables)]
    fn encode<S: std::io::Write + ?Sized>(
        &self,
        stream: &mut S,
        ctx: &opcua::types::Context<'_>,
    ) -> opcua::types::EncodingResult<usize> {
        let mut size = 0usize;
        size += self.reference_type_id.encode(stream, ctx)?;
        size += self.is_forward.encode(stream, ctx)?;
        size += self.node_id.encode(stream, ctx)?;
        size += self.browse_name.encode(stream, ctx)?;
        size += self.display_name.encode(stream, ctx)?;
        size += self.node_class.encode(stream, ctx)?;
        size += self.type_definition.encode(stream, ctx)?;
        Ok(size)
    }
}
impl opcua::types::BinaryDecodable for ReferenceDescription {
    #[allow(unused_variables)]
    fn decode<S: std::io::Read + ?Sized>(
        stream: &mut S,
        ctx: &opcua::types::Context<'_>,
    ) -> opcua::types::EncodingResult<Self> {
        Ok(Self {
            reference_type_id: opcua::types::BinaryDecodable::decode(stream, ctx)?,
            is_forward: opcua::types::BinaryDecodable::decode(stream, ctx)?,
            node_id: opcua::types::BinaryDecodable::decode(stream, ctx)?,
            browse_name: opcua::types::BinaryDecodable::decode(stream, ctx)?,
            display_name: opcua::types::BinaryDecodable::decode(stream, ctx)?,
            node_class: opcua::types::BinaryDecodable::decode(stream, ctx)?,
            type_definition: opcua::types::BinaryDecodable::decode(stream, ctx)?,
        })
    }
}
